<?php

namespace Szymon\TurniejBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * WynikRozgrywki
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class WynikRozgrywkiRepository extends EntityRepository
{
	/**
	 * Wybierz wszystkie rozgrywki dla danego turnieju,
	 * które odbywają się aktualnie na szachownicach
	 * 
	 * @param Turniej $turniej
	 * @param int $szachownica
	 * @return array
	 */
	public function findAllByTurniejRozgrywane($turniej) {
		$query = $this->createQueryBuilder('wr')
		->where('wr.wynik IS NULL AND wr.nrSzachownicy IS NOT NULL AND wr.turniej = :turniej')
		->setParameter('turniej', $turniej)
		->orderBy('wr.nrSzachownicy', 'ASC')
		->getQuery();
		
		$result = $query->getResult();
		$rozgrywki = array();
		
		foreach($result as $wynikRozgrywki) {
			$rozgrywki[$wynikRozgrywki->getNrSzachownicy()] = $wynikRozgrywki;
		}
		
		return $rozgrywki;
	}
	
	/**
	 * Znajdz dostepne rozgrywki w danym turnieju
	 * 
	 * @param Turniej $turniej
	 * @return array
	 */
	public function findDostepneRozgrywki($turniej, $aktualneRozgrywki) {
		$idZajetychZawodnikow = array();
		
		foreach($aktualneRozgrywki as $rozgrywka) {
			$idZajetychZawodnikow[] = $rozgrywka->getZawodnik1()->getId();
			$idZajetychZawodnikow[] = $rozgrywka->getZawodnik2()->getId();
		}
		$idZajetychZawodnikow[] = -1;
		
		$query = $this->createQueryBuilder('wr')
		->join('wr.zawodnik1', 'z1')
		->join('wr.zawodnik2', 'z2')
		->where('wr.nrSzachownicy IS NULL 
				AND z1.id NOT IN (:idZajetychZawodnikow1) 
				AND z2.id NOT IN (:idZajetychZawodnikow2) 
				AND wr.turniej = :turniej
			')
		->setParameter('idZajetychZawodnikow1', $idZajetychZawodnikow)
		->setParameter('idZajetychZawodnikow2', $idZajetychZawodnikow)
		->setParameter('turniej', $turniej)
		->getQuery();

		return $query->getResult();
	}
	
	/**
	 * Znajdź wszystkie rozgrywki dla historii rozgrywek
	 * 
	 * @param Turniej $turniej
	 * @param Grupa $grupa
	 * 
	 * @return array WynikRozgrywki
	 */
	public function findAllForHistoria($turniej, $runda, $grupa = null) {
		$query = $this->createQueryBuilder('wr')
			->join('wr.zawodnik1', 'z1')
			->where('wr.runda = :runda AND wr.turniej = :turniej AND wr.wynik IS NOT NULL')
			->setParameter('turniej', $turniej)
			->setParameter('runda', $runda);
		
		if($grupa != null && $grupa != -1) {
			$query = $query->andWhere('z1.grupa = :grupa')
				->setParameter('grupa', $grupa);
		}
		
		$query = $query->getQuery();
		
		return $query->getResult();
	}
	
	/**
	 * Znajdź wszystkie rozgrywki dla danego turnieju, które jeszcze nie są zakończone
	 *
	 * @param Turniej $turniej
	 * @return array WynikRozgrywki
	 */
	public function findByJeszczeNieZakonczona($turniej) {
		$query = $this->createQueryBuilder('wr')
			->where('wr.turniej = :turniej AND wr.wynik IS NULL')
			->setParameter('turniej', $turniej)
			->getQuery();
		
		return $query->getResult();
	}
	
	/**
	 * Znajdź wszystkie rozgrywki dla danych zawodników
	 *
	 * @param Turniej $turniej
	 * @param int[] $zawodnikIds
	 * 
	 * @return array WynikRozgrywki
	 */
	public function findAllForZawodnicy($turniej, $zawodnikIds) {	
		$query = $this->createQueryBuilder('wr')
		->where('wr.turniej = :turniej AND ( wr.zawodnik1 IN (:zawodnicy) AND wr.zawodnik2 IN (:zawodnicy) ) AND wr.wynik IS NOT NULL')
		->setParameter('turniej', $turniej)
		->setParameter('zawodnicy', $zawodnikIds)
		->getQuery();
		
		return $query->getResult();
	}
	
	/**
	 * Funkcja do sprawdzenia czy dani zawodnicy już grali 
	 * (np. w poprzedniej rundzie)
	 * 
	 * @param Zawodnik $zawodnik1
	 * @param Zawodnik $zawodnik2
	 * 
	 * @return WynikRozgrywki
	 */
	public function findRozgrywka($zawodnik1, $zawodnik2) {
		$query = $this->createQueryBuilder('wr')
		->where('(wr.zawodnik1 = :zawodnik1 AND wr.zawodnik2 = :zawodnik2) OR (wr.zawodnik1 = :zawodnik2 AND wr.zawodnik2 = :zawodnik1)')
		->setParameter('zawodnik1', $zawodnik1)
		->setParameter('zawodnik2', $zawodnik2)
		->getQuery();
		
		return $query->getResult();
	}
}