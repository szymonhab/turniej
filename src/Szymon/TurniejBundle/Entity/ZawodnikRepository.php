<?php

namespace Szymon\TurniejBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ZawodnikRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ZawodnikRepository extends EntityRepository
{
	/**
	 * Zapytanie do rozmieszacznia grup
	 *
	 * @param Turniej $turniej
	 * @return array
	 */
	public function findByTurniejOrderByKategoria($turniej) {
    $query = $this->createQueryBuilder('z')
      ->where('z.turniej = :turniej')
      ->setParameter('turniej', $turniej)
      ->orderBy('z.katSzachowa', 'ASC')
      ->getQuery();

    return $query->getResult();
	}
	
	/**
	 * Zapytanie do rozmieszacznia grup
	 * 
	 * @param Turniej $turniej
	 * @return array
	 */
	public function findByTurniejOrderByRokUrodzenia($turniej) {
		$query = $this->createQueryBuilder('z')
			->where('z.turniej = :turniej')
			->setParameter('turniej', $turniej)
			->orderBy('z.rokUrodzenia', 'DESC')
			->getQuery();
	
		return $query->getResult();
	}
	
	/**
	 * Znajdź zawodników do listy
	 * 
	 * @param Turniej $turniej
	 * @param string $sort
	 * @param string $direction
	 * @return array
	 */
	public function findByTurniejAndSort($turniej, $sort, $direction) {
		//validate direction
		$direction = strtoupper($direction);
		if($direction != 'ASC' && $direction != 'DESC') {
			$direction = 'ASC';
		}
		
		$sort = $this->validateSort($sort);
		
		$query = $this->createQueryBuilder('z')
			->where('z.turniej = :turniej')
			->setParameter('turniej', $turniej)
			->orderBy('z.'.$sort, $direction)
			->getQuery();
		
		return $query->getResult();
	}
	
	/**
	 * Znajdź zawodników którzy są bez grup w danym turnieju
	 *
	 * @param Turniej $turniej
	 */
	public function findZawodnicyBezGrupy($turniej) {
		$query = $this->createQueryBuilder('z')
			->where('z.turniej = :turniej AND z.grupa IS NULL')
			->setParameter('turniej', $turniej)
			->getQuery();
	
		return $query->getResult();
	}
	
	/**
	 * Helps validate possible sort values
	 * 
	 * @param string $sort
	 * @return string
	 */
	private function validateSort($sort) {
		$allowedSort = array(
			'id',
			'imie',
			'nazwisko',
			'rokUrodzenia',
			'katSzachowa',
			'grupa'
		);
		
		if(in_array($sort, $allowedSort)) {
			return $sort;
		} else {
			return 'id';
		}
	}
	
	/**
	 * Znajdź wszystkich przeciwników danego zawodnika w danej rundzie
	 *
	 * @param Turniej $turniej
	 * @param Zawodnik $zawodnik
	 * @return array Zawodnik
	 */
	public function findPrzeciwnicy($turniej, $zawodnik) {
		$query = $this->createQueryBuilder('z')
			->join('z.wynikRozgrywki1', 'wr1')
			->join('z.wynikRozgrywki2', 'wr2')
			->where('z.turniej = :turniej 
					AND (wr1.zawodnik2 = :zawodnik OR wr2.zawodnik1 = :zawodnik)
			')
			->setParameter('turniej', $turniej)
			->setParameter('zawodnik', $zawodnik)
			->getQuery();
		
		return $query->getResult();
	}
	
	/**
	 * Znajdź wszystkich zawodników danego turnieju do
	 * przycisku wyboru na menu dyskwalifikuj
	 * 
	 * @param Turniej $turniej
	 * @return array $result:
	 */
	public function findListForDyskwalifikacja($turniej) {
		$query = $this->createQueryBuilder('z')
			->where('z.turniej = :turniej AND (z.czyUsuniety IS NULL OR z.czyUsuniety = 0)')
			->setParameter('turniej', $turniej)
			->getQuery();
		
		$result = array();
		foreach($query->getResult() as $zawodnik) {
			$result[$zawodnik->getId()] = $zawodnik->getImie().' '.$zawodnik->getNazwisko();
		}
		
		return $result;
	}
	
	
	/**
	 * Sprawdź czy w turnieju istnieje już zawodnik
	 * o takim samym imieniu i nazwisku
	 * 
	 * @param Turniej $turniej
	 * @param Zawodnik $zawodnik
	 * 
	 * @return boolean $result:
	 */
	public function findSimilar($turniej, $zawodnik) {
		$query = $this->createQueryBuilder('z')
		->where('z.imie = :imie AND z.nazwisko = :nazwisko AND z.turniej = :turniej')
		->setParameter('imie', $zawodnik->getImie())
		->setParameter('nazwisko', $zawodnik->getNazwisko())
		->setParameter('turniej', $turniej)
		->getQuery();
		
		$result = $query->getResult();
		if(!empty($result)) {
			return true;
		}
		
		return false;
	}
}